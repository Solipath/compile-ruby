name: Aarch64 Linux Compile

#temporary
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  CARGO_TERM_COLOR: always
  VERSION: "3.2.2"
  SHORT_VERSION: "3.2"

#will eventually use this to kick off
# on: 
#   workflow_dispatch:
#     inputs:
#       VERSION:
#         required: true
#         type: string
#       SHORT_VERSION:
#         required: true
#         type: string

# env:
#   CARGO_TERM_COLOR: always
#   VERSION: ${{inputs.VERSION}}
#   SHORT_VERSION: ${{inputs.SHORT_VERSION}}

jobs:
  build:

    runs-on: ${{matrix.os}}

    strategy: 
      matrix:
        include:
        - os: ubuntu-latest
          name: linux_aarch64
          target: aarch64-unknown-linux-gnu
          compiler: /usr/bin/aarch64-linux-gnu-gcc -DPAGE_SIZE=16384
          cppcompiler: /usr/bin/aarch64-linux-gnu-g++ -DPAGE_SIZE=16384
          build: x86_64-unknown-linux-gnu

    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: Download openssl
      id: openssl
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://github.com/openssl/openssl/releases/download/openssl-3.2.0/openssl-3.2.0.tar.gz"
        target: openssl

    - name: Download ncurses
      id: ncurses
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://ftp.gnu.org/gnu/ncurses/ncurses-6.4.tar.gz"
        target: ncurses

    - name: Download libffi
      id: libffi
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz"
        target: libffi

    - name: Download readline
      id: readline
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz"
        target: readline

    - name: Download zlib
      id: zlib
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
        target: zlib

    - name: Download libyaml
      id: libyaml
      uses: suisei-cn/actions-download-file@v1.3.0
      with:
        url: "https://github.com/yaml/libyaml/releases/download/0.2.5/yaml-0.2.5.tar.gz"
        target: libyaml

    - name: Download the ruby
      uses: suisei-cn/actions-download-file@v1.3.0
      id: downloadfile
      with:
        url: "https://cache.ruby-lang.org/pub/ruby/${{env.SHORT_VERSION}}/ruby-${{env.VERSION}}.tar.gz"
        target: download
    - name: get compiler for aarch64 linux
      run: sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu 

    - name: configure and build ncurses
      run: |
        cd ncurses
        ls
        tar -xvf ncurses-6.4.tar.gz
        cd ncurses-6.4
        mkdir build
        cd build
        CC='${{matrix.compiler}}' CXX="${{matrix.cppcompiler}}" CPPFLAGS="-P -fPIC"  ../configure --prefix="${{github.workspace}}/libraries" --build=${{matrix.build}} --host=${{matrix.target}} --target=${{matrix.target}} --without-cxx-binding --without-shared --disable-stripping
        make
        make install

    - name: configure and build libffi
      run: |
        cd libffi
        ls
        tar -xvf libffi-3.4.4.tar.gz
        cd libffi-3.4.4
        mkdir build
        cd build
        CC='${{matrix.compiler}}' ../configure --prefix="${{github.workspace}}/libraries" --enable-static --disable-shared --build=${{matrix.build}} --host=${{matrix.target}} --target=${{matrix.target}}
        make
        make install

    - name: configure and build libyaml
      run: |
        cd yaml
        ls
        tar -xvf yaml-0.2.5.tar.gz
        cd yaml-0.2.5
        mkdir build
        cd build
        CC='${{matrix.compiler}}' ../configure --prefix="${{github.workspace}}/libraries" --enable-static --disable-shared --build=${{matrix.build}} --host=${{matrix.target}} --target=${{matrix.target}}
        make
        make install

    - name: configure and build zlib
      run: |
        cd zlib
        ls
        tar -xvf zlib-1.3.tar.gz
        cd zlib-1.3
        mkdir build
        cd build
        CC='${{matrix.compiler}}' ../configure --prefix="${{github.workspace}}/libraries" --static
        make
        make install
    
    - name: configure and build readline
      run: |
        cd readline
        ls
        tar -xvf readline-8.2.tar.gz
        cd readline-8.2
        mkdir build
        cd build
        CC='${{matrix.compiler}}'  CFLAGS="-I${{github.workspace}}/libraries/include -fPIC" LDFLAGS="-L${{github.workspace}}/libraries/lib" ../configure --prefix="${{github.workspace}}/libraries"  --build=${{matrix.build}} --host=${{matrix.target}} --target=${{matrix.target}} --enable-static --disable-shared
        make
        make install

    - name: configure and build openssl
      run: |
        cd openssl
        ls
        tar -xvf openssl-3.2.0.tar.gz
        cd openssl-3.2.0
        mkdir build
        cd build
        CC='${{matrix.compiler}}' ../Configure --prefix="${{github.workspace}}/libraries" linux-aarch64 no-shared
        make
        make install
    - name: configure ruby build
      run: |
        uname -m
        cd download
        ls
        tar -xvf ruby-${{env.VERSION}}.tar.gz
        mv ruby-${{env.VERSION}} ..
        echo "git workspace: ${{github.workspace}}"
        cd ..
        mkdir build
        cp solipath build
        cd build
        echo '[{"name": "ruby", "version": "${{env.VERSION}}"}]' > solipath.json
        ./solipath ../ruby-${{env.VERSION}}/configure CFLAGS="-I${{github.workspace}}/libraries/include -fPIC" LDFLAGS="-L${{github.workspace}}/libraries/lib" CC='${{matrix.compiler}}' LD='${{matrix.compiler}}' CXX="${{matrix.cppcompiler}}" --build=${{matrix.build}} --host=${{matrix.target}} --target=${{matrix.target}} --enable-load-relative --disable-shared --enable-static --without-gmp --prefix="$PWD/bin"
    - name: compile ruby
      run: |
        cd build
        ls -a
        echo "Print Makefile:"
        cat Makefile
        echo "start build"
        MINIRUBY="$BASERUBY" && ./solipath make V=1 CC='${{matrix.compiler}}' LD='${{matrix.compiler}}' CXX="${{matrix.cppcompiler}}"
        echo "start install"
        MINIRUBY="$BASERUBY" && ./solipath make install CC='${{matrix.compiler}}' LD='${{matrix.compiler}}'
        tar -czvf ruby.tar.gz bin
    - name: release ruby
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{env.VERSION}}-${{matrix.name}}"
        prerelease: false
        title: "${{env.VERSION}}-${{matrix.name}}"
        files: |
          build/ruby.tar.gz
          
